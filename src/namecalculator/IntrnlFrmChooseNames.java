/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package namecalculator;

import java.awt.*;
import java.awt.event.*;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
//import java.util.logging.Level;
//import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.event.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.*;
import myframework.pkgGUIContainers.ClsGUIContainers;
import org.jdesktop.swingx.*;

/**
 *
 * @author Windows2K
 */
public class IntrnlFrmChooseNames extends javax.swing.JInternalFrame {

    /**
     * Creates new form IntrnlFrmChooseNames
     */
    DefaultListModel objLstNameStart = new DefaultListModel();
    DefaultListModel objLstMeanContain = new DefaultListModel();
    DefaultListModel objLstNameLetterCnt = new DefaultListModel();
    DefaultListModel objLstNameNumurologyBig = new DefaultListModel();
    DefaultListModel objLstNameNumurologySmall = new DefaultListModel();
    FrmMain objMainFrom;
    ClsGUIContainers objGUIContainer;

    public IntrnlFrmChooseNames() {
        objMainFrom = FrmMain.self();
        objGUIContainer = ClsGUIContainers.self(objMainFrom.txtLogs);
        initComponents();
    }

    static IntrnlFrmChooseNames objFrm;

    public static IntrnlFrmChooseNames self() {
        //if (objFrm == null) {
        objFrm = new IntrnlFrmChooseNames();
        //}
        return objFrm;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel8 = new javax.swing.JLabel();
        scrltbl = new javax.swing.JScrollPane();
        tblBabyNameReport = new org.jdesktop.swingx.JXTable();
        cmdShowBookmarked = new javax.swing.JButton();
        pnlCheckBoxes = new javax.swing.JPanel();
        txtNameStartWith = new javax.swing.JTextField();
        txtNameMeaning = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstNameStartWith = new javax.swing.JList();
        jScrollPane5 = new javax.swing.JScrollPane();
        lstMeaningContains = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtNumerologyActual = new javax.swing.JTextField();
        jScrollPane6 = new javax.swing.JScrollPane();
        lstNumerologyActual = new javax.swing.JList();
        txtNumerologySingle = new javax.swing.JTextField();
        jScrollPane7 = new javax.swing.JScrollPane();
        lstNumerologySingle = new javax.swing.JList();
        txtLetterCount = new javax.swing.JTextField();
        jScrollPane8 = new javax.swing.JScrollPane();
        lstLetterCount = new javax.swing.JList();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        optNameContains = new javax.swing.JRadioButton();
        optNameBigins = new javax.swing.JRadioButton();
        optNameEnds = new javax.swing.JRadioButton();
        cmdResetFilters = new javax.swing.JButton();
        chkConsiderInitial = new javax.swing.JCheckBox();
        cmdSearchByFilter = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        cmdShowAllRecords = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        cmdShowHidden = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setTitle("Choose Names");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel8.setBackground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("jLabel8");
        jLabel8.setOpaque(true);
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(1240, 620, -1, -1));

        scrltbl.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        scrltbl.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        tblBabyNameReport.setBackground(new java.awt.Color(153, 255, 153));
        tblBabyNameReport.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBabyNameReport.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblBabyNameReport.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tblBabyNameReport.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblBabyNameReportMouseReleased(evt);
            }
        });
        tblBabyNameReport.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblBabyNameReportKeyPressed(evt);
            }
        });
        scrltbl.setViewportView(tblBabyNameReport);

        getContentPane().add(scrltbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 290, 1240, 320));

        cmdShowBookmarked.setBackground(new java.awt.Color(102, 102, 255));
        cmdShowBookmarked.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cmdShowBookmarked.setText("Show Bookmarked");
        cmdShowBookmarked.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowBookmarkedActionPerformed(evt);
            }
        });
        getContentPane().add(cmdShowBookmarked, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 140, 160, 30));

        pnlCheckBoxes.setBackground(new java.awt.Color(0, 204, 204));
        pnlCheckBoxes.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtNameStartWith.setPreferredSize(new java.awt.Dimension(59, 5));
        txtNameStartWith.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameStartWithActionPerformed(evt);
            }
        });
        pnlCheckBoxes.add(txtNameStartWith, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 30, 162, 30));

        txtNameMeaning.setPreferredSize(new java.awt.Dimension(59, 5));
        txtNameMeaning.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameMeaningActionPerformed(evt);
            }
        });
        pnlCheckBoxes.add(txtNameMeaning, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 30, 170, 32));

        lstNameStartWith.setBackground(new java.awt.Color(255, 153, 255));
        lstNameStartWith.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lstNameStartWith.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lstNameStartWithKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(lstNameStartWith);

        pnlCheckBoxes.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 70, 162, 140));

        lstMeaningContains.setBackground(new java.awt.Color(255, 153, 255));
        lstMeaningContains.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lstMeaningContains.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lstMeaningContainsKeyReleased(evt);
            }
        });
        jScrollPane5.setViewportView(lstMeaningContains);

        pnlCheckBoxes.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 70, 170, 160));

        jLabel1.setText("<html>Name Meaning Contains</html>");
        jLabel1.setRequestFocusEnabled(false);
        pnlCheckBoxes.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 0, 160, 30));

        jLabel2.setText("<html>\n<ol>\n<li>Select single or multiple values for filter.</li>\n<li>Unwanted values can be deleted by pressing delete key</li>\n<li>By pressing Escape key the filter can be reset</li>\n</ol>\n</html>");
        pnlCheckBoxes.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 240, 190));

        jLabel4.setText("<html>Numerology Acual</html>");
        pnlCheckBoxes.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 0, 80, 30));

        jLabel5.setText("<html>Numerology Single</html>");
        pnlCheckBoxes.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 0, 80, 30));

        jLabel6.setText("<html>Letter Count</html>");
        pnlCheckBoxes.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 0, 90, 30));

        txtNumerologyActual.setPreferredSize(new java.awt.Dimension(59, 5));
        txtNumerologyActual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumerologyActualActionPerformed(evt);
            }
        });
        pnlCheckBoxes.add(txtNumerologyActual, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 30, 90, 32));

        lstNumerologyActual.setBackground(new java.awt.Color(255, 153, 255));
        lstNumerologyActual.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lstNumerologyActual.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lstNumerologyActualKeyReleased(evt);
            }
        });
        jScrollPane6.setViewportView(lstNumerologyActual);

        pnlCheckBoxes.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 70, 90, 160));

        txtNumerologySingle.setPreferredSize(new java.awt.Dimension(59, 5));
        txtNumerologySingle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumerologySingleActionPerformed(evt);
            }
        });
        pnlCheckBoxes.add(txtNumerologySingle, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 30, 90, 32));

        lstNumerologySingle.setBackground(new java.awt.Color(255, 153, 255));
        lstNumerologySingle.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lstNumerologySingle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lstNumerologySingleKeyReleased(evt);
            }
        });
        jScrollPane7.setViewportView(lstNumerologySingle);

        pnlCheckBoxes.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 70, 90, 160));

        txtLetterCount.setPreferredSize(new java.awt.Dimension(59, 5));
        txtLetterCount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLetterCountActionPerformed(evt);
            }
        });
        pnlCheckBoxes.add(txtLetterCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 30, 90, 32));

        lstLetterCount.setBackground(new java.awt.Color(255, 153, 255));
        lstLetterCount.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lstLetterCount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lstLetterCountKeyReleased(evt);
            }
        });
        jScrollPane8.setViewportView(lstLetterCount);

        pnlCheckBoxes.add(jScrollPane8, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 70, 90, 160));

        jLabel9.setText("<html>Name Start/End/Contains</html>");
        pnlCheckBoxes.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 0, 160, 30));

        jLabel10.setText("<html>Add New Filter value and press enter</html>");
        pnlCheckBoxes.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 30, 190, 30));

        optNameContains.setBackground(new java.awt.Color(255, 153, 255));
        buttonGroup1.add(optNameContains);
        optNameContains.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        optNameContains.setText("Contains");
        pnlCheckBoxes.add(optNameContains, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 240, -1, 20));

        optNameBigins.setBackground(new java.awt.Color(255, 153, 255));
        buttonGroup1.add(optNameBigins);
        optNameBigins.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        optNameBigins.setSelected(true);
        optNameBigins.setText("Begins");
        pnlCheckBoxes.add(optNameBigins, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 240, -1, 20));

        optNameEnds.setBackground(new java.awt.Color(255, 153, 255));
        buttonGroup1.add(optNameEnds);
        optNameEnds.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        optNameEnds.setText("Ends");
        pnlCheckBoxes.add(optNameEnds, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 240, -1, 20));

        cmdResetFilters.setBackground(new java.awt.Color(255, 153, 255));
        cmdResetFilters.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cmdResetFilters.setText("Reset All Filters");
        cmdResetFilters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdResetFiltersActionPerformed(evt);
            }
        });
        pnlCheckBoxes.add(cmdResetFilters, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 200, 160, 30));

        chkConsiderInitial.setBackground(new java.awt.Color(255, 153, 255));
        chkConsiderInitial.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        chkConsiderInitial.setSelected(true);
        chkConsiderInitial.setText("Consider Name Initials");
        pnlCheckBoxes.add(chkConsiderInitial, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 240, 170, -1));

        getContentPane().add(pnlCheckBoxes, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 960, 270));

        cmdSearchByFilter.setBackground(new java.awt.Color(255, 153, 255));
        cmdSearchByFilter.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cmdSearchByFilter.setText("Show By Filter");
        cmdSearchByFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSearchByFilterActionPerformed(evt);
            }
        });
        getContentPane().add(cmdSearchByFilter, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 80, 160, 30));

        jLabel7.setText("OR");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 60, -1, -1));

        cmdShowAllRecords.setBackground(new java.awt.Color(153, 255, 153));
        cmdShowAllRecords.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cmdShowAllRecords.setText("Show All Records");
        cmdShowAllRecords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowAllRecordsActionPerformed(evt);
            }
        });
        getContentPane().add(cmdShowAllRecords, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 20, 160, 30));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 0, 255));
        jLabel11.setText("<html>Press \"Alt + h\" to hide record. <br>Do same to unhide</html>");
        jLabel11.setAutoscrolls(true);
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 250, 270, 40));

        cmdShowHidden.setBackground(new java.awt.Color(102, 102, 255));
        cmdShowHidden.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cmdShowHidden.setText("Show Hidden Records");
        cmdShowHidden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowHiddenActionPerformed(evt);
            }
        });
        getContentPane().add(cmdShowHidden, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 200, 160, 30));

        jLabel12.setText("OR");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 120, -1, -1));

        jLabel13.setText("OR");
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 180, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblBabyNameReportMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBabyNameReportMouseReleased
        // TODO add your handling code here:
        int intRow = tblBabyNameReport.getSelectedRow();
        int intCol = tblBabyNameReport.getSelectedColumn();
        if (tblBabyNameReport.isCellEditable(intRow, intCol)) {
            try {
                boolean blnValue = (boolean) tblBabyNameReport.getValueAt(intRow, intCol);
                int intTblId = (int) tblBabyNameReport.getValueAt(intRow, 8);
                objMainFrom.objDBHSQ.fnUpdateQuery("ChooseYourBabyName", "update tbl_baby_names set " + (chkConsiderInitial.isSelected() ? " bookmarked_initial = " : " bookmarked = ") + blnValue + " where tblid = " + intTblId);
            } catch (SQLException ex) {
                objGUIContainer.fnShowConfirmDialog(this, ex.getMessage(), "Information", JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_tblBabyNameReportMouseReleased

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            ResultSet objrs = objMainFrom.objDBHSQ.fnSelectQuery("ChooseYourBabyName", "select START_WITH_VALUE from TBL_FILTER_BYNAME");
            while (objrs.next()) {
                objLstNameStart.addElement(objrs.getString(1));
            }
            lstNameStartWith.setModel(objLstNameStart);

            objrs = objMainFrom.objDBHSQ.fnSelectQuery("ChooseYourBabyName", "select LETTER_COUNT_VALUE from TBL_FILTER_NAME_LETTER_COUNT");
            while (objrs.next()) {
                objLstNameLetterCnt.addElement(objrs.getString(1));
            }
            lstLetterCount.setModel(objLstNameLetterCnt);

            objrs = objMainFrom.objDBHSQ.fnSelectQuery("ChooseYourBabyName", "select VALUE_CONTAINS from TBL_FILTER_NAME_MEANING");
            while (objrs.next()) {
                objLstMeanContain.addElement(objrs.getString(1));
            }
            lstMeaningContains.setModel(objLstMeanContain);

            objrs = objMainFrom.objDBHSQ.fnSelectQuery("ChooseYourBabyName", "select VALUE from TBL_FILTER_NAME_NUMUROLOGY_ACTUAL");
            while (objrs.next()) {
                objLstNameNumurologyBig.addElement(objrs.getString(1));
            }
            lstNumerologyActual.setModel(objLstNameNumurologyBig);

            objrs = objMainFrom.objDBHSQ.fnSelectQuery("ChooseYourBabyName", "select VALUE from TBL_FILTER_NAME_NUMUROLOGY_SINGLE");
            while (objrs.next()) {
                objLstNameNumurologySmall.addElement(objrs.getString(1));
            }
            lstNumerologySingle.setModel(objLstNameNumurologySmall);

            objrs.close();
            objrs = null;
        } catch (SQLException ex) {
            objGUIContainer.fnShowConfirmDialog(this, ex.getMessage(), "Information", JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE);
            //Logger.getLogger(IntrnlFrmFormatNames.class.getName()).log(Level.SEVERE, null, ex);
        }
        //objGUIContainer.fnShowInternalFormMiddle(objMainFrom, this);

    }//GEN-LAST:event_formInternalFrameOpened
    private class RowListener implements ListSelectionListener {

        public void valueChanged(ListSelectionEvent event) {
            if (event.getValueIsAdjusting()) {
                return;
            }
            //output.append("ROW SELECTION EVENT. ");
            //outputSelection();
        }
    }

    private class ColumnListener implements ListSelectionListener {

        public void valueChanged(ListSelectionEvent event) {
            if (event.getValueIsAdjusting()) {
                return;
            }
            //output.append("COLUMN SELECTION EVENT. ");
            //outputSelection();
        }
    }

    private void txtNameStartWithActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameStartWithActionPerformed
        // TODO add your handling code here:
        fnAddRecord(txtNameStartWith, "TBL_FILTER_BYNAME", objLstNameStart);
    }//GEN-LAST:event_txtNameStartWithActionPerformed

    private void txtLetterCountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLetterCountActionPerformed
        // TODO add your handling code here:
        fnAddRecord(txtLetterCount, "TBL_FILTER_NAME_LETTER_COUNT", objLstNameLetterCnt);
    }//GEN-LAST:event_txtLetterCountActionPerformed

    private void txtNumerologyActualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumerologyActualActionPerformed
        // TODO add your handling code here:
        fnAddRecord(txtNumerologyActual, "TBL_FILTER_NAME_NUMUROLOGY_ACTUAL", objLstNameNumurologyBig);
    }//GEN-LAST:event_txtNumerologyActualActionPerformed

    private void txtNumerologySingleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumerologySingleActionPerformed
        // TODO add your handling code here:
        fnAddRecord(txtNumerologySingle, "TBL_FILTER_NAME_NUMUROLOGY_SINGLE", objLstNameNumurologySmall);
    }//GEN-LAST:event_txtNumerologySingleActionPerformed

    private void txtNameMeaningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameMeaningActionPerformed
        // TODO add your handling code here:
        fnAddRecord(txtNameMeaning, "TBL_FILTER_NAME_MEANING", objLstMeanContain);
    }//GEN-LAST:event_txtNameMeaningActionPerformed

    private void lstNameStartWithKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lstNameStartWithKeyReleased
        // TODO add your handling code here:
        fnDeleteRecord(evt, objLstNameStart, lstNameStartWith, "TBL_FILTER_BYNAME", "START_WITH_VALUE");
        fnDeSelectListBox(evt, lstNameStartWith);
    }//GEN-LAST:event_lstNameStartWithKeyReleased

    private void lstLetterCountKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lstLetterCountKeyReleased
        // TODO add your handling code here:
        fnDeleteRecord(evt, objLstNameLetterCnt, lstLetterCount, "TBL_FILTER_NAME_LETTER_COUNT", "LETTER_COUNT_VALUE");
        fnDeSelectListBox(evt, lstLetterCount);
    }//GEN-LAST:event_lstLetterCountKeyReleased

    private void lstNumerologyActualKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lstNumerologyActualKeyReleased
        // TODO add your handling code here:
        fnDeleteRecord(evt, objLstNameNumurologyBig, lstNumerologyActual, "TBL_FILTER_NAME_NUMUROLOGY_ACTUAL", "VALUE");
        fnDeSelectListBox(evt, lstNumerologyActual);
    }//GEN-LAST:event_lstNumerologyActualKeyReleased

    private void lstNumerologySingleKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lstNumerologySingleKeyReleased
        // TODO add your handling code here:
        fnDeleteRecord(evt, objLstNameNumurologySmall, lstNumerologySingle, "TBL_FILTER_NAME_NUMUROLOGY_SINGLE", "VALUE");
        fnDeSelectListBox(evt, lstNumerologySingle);
    }//GEN-LAST:event_lstNumerologySingleKeyReleased

    private void lstMeaningContainsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lstMeaningContainsKeyReleased
        // TODO add your handling code here:
        fnDeleteRecord(evt, objLstMeanContain, lstMeaningContains, "TBL_FILTER_NAME_MEANING", "VALUE_CONTAINS");
        fnDeSelectListBox(evt, lstMeaningContains);
    }//GEN-LAST:event_lstMeaningContainsKeyReleased

    private void cmdSearchByFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSearchByFilterActionPerformed
        try {
            // TODO add your handling code here:
            if (lstLetterCount.isSelectionEmpty() && lstNameStartWith.isSelectionEmpty() && lstMeaningContains.isSelectionEmpty() && lstNumerologyActual.isSelectionEmpty() && lstNumerologySingle.isSelectionEmpty()) {
                objGUIContainer.fnShowConfirmDialog(this, "No filter selected. Please select any one of the filter", "Information", JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE);
                return;
            }
            String strAllFiler = "";
            String strSingleFiler = "";
            String strQuery = "";
            if (!chkConsiderInitial.isSelected()) {
                strQuery = fnGetQueryWithoutInitial();
                strQuery += "and isnull(hidden,false)= false ";
                if (!lstLetterCount.isSelectionEmpty()) {
                    strSingleFiler = fnJoinArrayElements(lstLetterCount, false, false);
                    strAllFiler += "Letter Count :" + strSingleFiler + "\n";
                    strQuery += " and LETTERCOUNT in (" + strSingleFiler + ")";
                }
                if (!lstNumerologyActual.isSelectionEmpty()) {
                    strSingleFiler = fnJoinArrayElements(lstNumerologyActual, false, false);
                    strAllFiler += "Numerology Actual :" + strSingleFiler + "\n";
                    
                    strQuery += " and NUMEROLOGY_ACTUAL_NUM in (" + strSingleFiler + ")";
                }
                if (!lstNumerologySingle.isSelectionEmpty()) {
                    strSingleFiler = fnJoinArrayElements(lstNumerologySingle, false, false);
                    strAllFiler += "Numerology Single :" + strSingleFiler + "\n";
                    
                    strQuery += " and NUMEROLOGY_SINGLE_NUM in (" + strSingleFiler + ")";
                }
                
            } else {
                strQuery = fnGetQueryWithInitial();
                strQuery += "and isnull(hidden,false)= false ";
                if (!lstLetterCount.isSelectionEmpty()) {
                    strSingleFiler = fnJoinArrayElements(lstLetterCount, false, false);
                    strAllFiler += "Letter Count :" + strSingleFiler + "\n";
                    
                    strQuery += " and LETTERCOUNT_INITIAL in (" + strSingleFiler + ")";
                }
                if (!lstNumerologyActual.isSelectionEmpty()) {
                    strSingleFiler = fnJoinArrayElements(lstNumerologyActual, false, false);
                    strAllFiler += "Numerology Actual :" + strSingleFiler + "\n";
                    
                    strQuery += " and NUMEROLOGY_ACTUAL_NUM_INITIAL in (" + strSingleFiler + ")";
                }
                if (!lstNumerologySingle.isSelectionEmpty()) {
                    strSingleFiler = fnJoinArrayElements(lstNumerologySingle, false, false);
                    strAllFiler += "Numerology Single :" + strSingleFiler + "\n";
                    
                    strQuery += " and NUMEROLOGY_SINGLE_NUM_INITIAL in (" + strSingleFiler + ")";
                }
            }
            if (!lstNameStartWith.isSelectionEmpty()) {
                if (optNameBigins.isSelected()) {
                    strSingleFiler = fnJoinArrayElements(lstNameStartWith, false, true);
                    strAllFiler += "Name Start With :" + strSingleFiler + "\n";
                    
                    strQuery += " and SQLfnIsMatchedStartWith(lcase(NAME), '" + strSingleFiler + "') = true";
                } else if (optNameContains.isSelected()) {
                    strSingleFiler = fnJoinArrayElements(lstNameStartWith, false, true);
                    strAllFiler += "Name Contains :" + strSingleFiler + "\n";
                    
                    strQuery += " and SQLfnIsMatchedContains(lcase(NAME), '" + strSingleFiler + "') = true";
                } else {
                    strSingleFiler = fnJoinArrayElements(lstNameStartWith, false, true);
                    strAllFiler += "Name End With :" + strSingleFiler + "\n";
                    
                    strQuery += " and SQLfnIsMatchedEndWith(lcase(NAME), '" + strSingleFiler + "') = true";
                }
            }
            
            if (!lstMeaningContains.isSelectionEmpty()) {
                strSingleFiler = fnJoinArrayElements(lstMeaningContains, false, true);
                strAllFiler += "Meaning Contains :" + strSingleFiler + "\n";
                
                strQuery += " and SQLfnIsMatchedContains(lcase(NAMEMEANING), '" + strSingleFiler + "') = true";
            }
            
            if (!chkConsiderInitial.isSelected()) {
                strQuery += " order by NAME_INITIAL";
            } else {
                strQuery += " order by NAME";
            }
            
            objGUIContainer.fnShowConfirmDialog(this, "Below are the filter details\n\n" + strAllFiler, "Information", JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE);
            
            objGUIContainer.fnResultSetToJTable(tblBabyNameReport, objMainFrom.objDBHSQ.fnSelectQuery("ChooseYourBabyName", strQuery), true, new int[]{1}, null);
            tblBabyNameReport.packAll();
        } catch (SQLException ex) {
            objGUIContainer.fnShowConfirmDialog(this, ex.getMessage(), "Information", JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cmdSearchByFilterActionPerformed

    private void cmdShowAllRecordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowAllRecordsActionPerformed
        // TODO add your handling code here:
        String strQuery = "";
        if (!chkConsiderInitial.isSelected()) {
            strQuery = fnGetQueryWithoutInitial();
            strQuery += "and isnull(hidden,false) = false ";
        } else {
            strQuery = fnGetQueryWithInitial();
            strQuery += "and isnull(hidden,false) = false ";
        }
        try {
            objGUIContainer.fnResultSetToJTable(tblBabyNameReport, objMainFrom.objDBHSQ.fnSelectQuery("ChooseYourBabyName", strQuery), true, new int[]{1},null);
        } catch (SQLException ex) {
            objGUIContainer.fnShowConfirmDialog(this, ex.getMessage(), "Information", JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE);
        }
        tblBabyNameReport.packAll();
    }//GEN-LAST:event_cmdShowAllRecordsActionPerformed

    private String fnGetQueryWithoutInitial() {
        String strQuery = "";
        strQuery = "SELECT bookmarked as \"Bookmarked\","
                + "	NAME as \"Baby Name\","
                + "	NAMEMEANING as \"Name Meaning\","
                + "	NUMEROLOGY_SINGLE_NUM as \"Numurology Single\","
                + "	NUMEROLOGY_ACTUAL_NUM as \"Numurology Actual\","
                + "	LETTERCOUNT as \"Name Length\","
                + "	ADDEDAT as \"Rec. Created On\","
                + "	b.TBLID as \"Rec. Id\","
                + " r.value as \"Ref. Link\""
                + " FROM"
                + "	TBL_BABY_NAMES b, TBL_REFERENCE_LINK r where r.TBLID = b.REF_TBLID_REF_LINK ";
        return strQuery;
    }

    private String fnGetQueryWithInitial() {
        String strQuery = "";
        strQuery = "SELECT bookmarked_initial as \"Bookmarked\","
                + "	NAME_INITIAL as \"Baby Name\","
                + "	NAMEMEANING as \"Name Meaning\","
                + "	NUMEROLOGY_SINGLE_NUM_INITIAL as \"Numurology Single\","
                + "	NUMEROLOGY_ACTUAL_NUM_INITIAL as \"Numurology Actual\","
                + "	LETTERCOUNT_INITIAL as \"Name Length\","
                + "	ADDEDAT as \"Rec. Created On\","
                + "	b.TBLID as \"Rec. Id\","
                + " r.value as \"Ref. Link\""
                + " FROM"
                + "	TBL_BABY_NAMES b, TBL_REFERENCE_LINK r where r.TBLID = b.REF_TBLID_REF_LINK ";
        return strQuery;
    }

    private void cmdShowBookmarkedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowBookmarkedActionPerformed
        try {
            // TODO add your handling code here:
            String strQuery = "";
            if (!chkConsiderInitial.isSelected()) {
                strQuery = fnGetQueryWithoutInitial();
                strQuery += " and bookmarked = true and isnull(hidden,false)= false ";
            } else {
                strQuery = fnGetQueryWithInitial();
                strQuery += " and bookmarked_initial = true  and isnull(hidden,false) = false ";
            }
            objGUIContainer.fnResultSetToJTable(tblBabyNameReport, objMainFrom.objDBHSQ.fnSelectQuery("ChooseYourBabyName", strQuery), true, new int[]{1},null);
            tblBabyNameReport.packAll();
        } catch (SQLException ex) {
            objGUIContainer.fnShowConfirmDialog(this, ex.getMessage(), "Information", JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cmdShowBookmarkedActionPerformed

    private void cmdResetFiltersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdResetFiltersActionPerformed
        // TODO add your handling code here:
        lstLetterCount.clearSelection();
        lstNameStartWith.clearSelection();
        lstMeaningContains.clearSelection();
        lstNumerologyActual.clearSelection();
        lstNumerologySingle.clearSelection();
        optNameBigins.setSelected(true);
        chkConsiderInitial.setSelected(true);
    }//GEN-LAST:event_cmdResetFiltersActionPerformed

    private void tblBabyNameReportKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblBabyNameReportKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_H && evt.isAltDown()) {
            try {
                int intRow = tblBabyNameReport.getSelectedRow();
                int intTblId = (int) tblBabyNameReport.getValueAt(intRow, 8);
                objMainFrom.objDBHSQ.fnUpdateQuery("ChooseYourBabyName", "update tbl_baby_names set hidden = not isnull(hidden,false) where tblid = " + intTblId);
            } catch (SQLException ex) {
                objGUIContainer.fnShowConfirmDialog(this, ex.getMessage(), "Information", JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_tblBabyNameReportKeyPressed

    private void cmdShowHiddenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowHiddenActionPerformed
        try {
            // TODO add your handling code here:
            String strQuery = "";
            if (!chkConsiderInitial.isSelected()) {
                strQuery = fnGetQueryWithoutInitial();
                strQuery += " and isnull(hidden,false)= true ";
            } else {
                strQuery = fnGetQueryWithInitial();
                strQuery += " and isnull(hidden,false) = true ";
            }
            objGUIContainer.fnResultSetToJTable(tblBabyNameReport, objMainFrom.objDBHSQ.fnSelectQuery("ChooseYourBabyName", strQuery), true, new int[]{1},null);
            tblBabyNameReport.packAll();
        } catch (SQLException ex) {
            objGUIContainer.fnShowConfirmDialog(this, ex.getMessage(), "Information", JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cmdShowHiddenActionPerformed

    private String fnJoinArrayElements(JList lstBox, boolean isSingQuoteNeeded, boolean toLowerCase) {
        String strValue = "";
        String strDataTypeValue = "";
        java.util.List objLst;
        if (!lstBox.isSelectionEmpty()) {
            objLst = lstBox.getSelectedValuesList();

            if (isSingQuoteNeeded) {
                strDataTypeValue = "'";
            }
            strValue = strDataTypeValue + objLst.get(0).toString() + strDataTypeValue;
            for (int iCount = 1; iCount < objLst.size(); iCount++) {
                strValue += ",";
                strValue += strDataTypeValue + objLst.get(iCount).toString() + strDataTypeValue;
            }
        } else {
            strValue = "";
        }
        return toLowerCase ? strValue.toLowerCase() : strValue;
    }

    private void fnAddRecord(JTextField txtBox, String strTblName, DefaultListModel lstModal) {
        try {
            String str = txtBox.getText().trim();
            if (objMainFrom.objDBHSQ.fnInsertQuery("ChooseYourBabyName", "insert into " + strTblName + " values ('" + str + "')") != -1) {
                lstModal.addElement(str);
                objGUIContainer.fnShowMessageDialog(this, "Added..");
            } else {
                objGUIContainer.fnShowMessageDialog(this, "Not Added..");
            }
        } catch (SQLException ex) {
            objGUIContainer.fnShowConfirmDialog(this, ex.getMessage(), "Information", JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE);
        }
    }

    private void fnDeleteRecord(java.awt.event.KeyEvent evt, DefaultListModel objLstMdl, JList objLst, String strTblName, String strColName) {
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            if (objGUIContainer.fnShowConfirmDialog(this, "Want to Delete?", "Confirm", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                try {
                    String strValue = objLstMdl.getElementAt(objLst.getSelectedIndex()).toString();
                    if (objMainFrom.objDBHSQ.fnDeleteQuery("ChooseYourBabyName", "Delete from " + strTblName + " where " + strColName + " = '" + strValue + "'") != -1) {
                        objLstMdl.removeElementAt(objLst.getSelectedIndex());
                        objGUIContainer.fnShowMessageDialog(this, "Deleted..");
                    } else {
                        objGUIContainer.fnShowMessageDialog(this, "Not Deleted..");
                    }
                } catch (SQLException ex) {
                    objGUIContainer.fnShowConfirmDialog(this, ex.getMessage(), "Information", JOptionPane.PLAIN_MESSAGE, JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }

    private void fnDeSelectListBox(java.awt.event.KeyEvent evt, JList objLst) {
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            objLst.setSelectedIndices(null);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkConsiderInitial;
    private javax.swing.JButton cmdResetFilters;
    private javax.swing.JButton cmdSearchByFilter;
    private javax.swing.JButton cmdShowAllRecords;
    private javax.swing.JButton cmdShowBookmarked;
    private javax.swing.JButton cmdShowHidden;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JList lstLetterCount;
    private javax.swing.JList lstMeaningContains;
    private javax.swing.JList lstNameStartWith;
    private javax.swing.JList lstNumerologyActual;
    private javax.swing.JList lstNumerologySingle;
    private javax.swing.JRadioButton optNameBigins;
    private javax.swing.JRadioButton optNameContains;
    private javax.swing.JRadioButton optNameEnds;
    private javax.swing.JPanel pnlCheckBoxes;
    private javax.swing.JScrollPane scrltbl;
    private org.jdesktop.swingx.JXTable tblBabyNameReport;
    private javax.swing.JTextField txtLetterCount;
    private javax.swing.JTextField txtNameMeaning;
    private javax.swing.JTextField txtNameStartWith;
    private javax.swing.JTextField txtNumerologyActual;
    private javax.swing.JTextField txtNumerologySingle;
    // End of variables declaration//GEN-END:variables
}
